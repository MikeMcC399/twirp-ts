// @generated by protobuf-ts 2.0.0-alpha.27 with parameters client_none,generate_dependencies
// @generated from protobuf file "service.proto" (package "twirp.example.haberdasher", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Size of a Hat, in inches.
 *
 * @generated from protobuf message twirp.example.haberdasher.Size
 */
export interface Size {
  /**
   * @generated from protobuf field: int32 inches = 1;
   */
  inches: number; // must be > 0
}
/**
 * A Hat is a piece of headwear made by a Haberdasher.
 *
 * @generated from protobuf message twirp.example.haberdasher.Hat
 */
export interface Hat {
  /**
   * @generated from protobuf field: int32 inches = 1;
   */
  inches: number;
  /**
   * @generated from protobuf field: string color = 2;
   */
  color: string; // anything but "invisible"
  /**
   * @generated from protobuf field: string name = 3;
   */
  name: string; // i.e. "bowler"
}
// @generated message type with reflection information, may provide speed optimized methods
class Size$Type extends MessageType<Size> {
  constructor() {
    super("twirp.example.haberdasher.Size", [
      { no: 1, name: "inches", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
    ]);
  }
  internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Size): Size {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 inches */ 1:
          message.inches = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: Size, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* int32 inches = 1; */
    if (message.inches !== 0)
      writer.tag(1, WireType.Varint).int32(message.inches);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message twirp.example.haberdasher.Size
 */
export const Size = new Size$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Hat$Type extends MessageType<Hat> {
  constructor() {
    super("twirp.example.haberdasher.Hat", [
      { no: 1, name: "inches", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
    ]);
  }
  internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hat): Hat {
    let message = target ?? this.create(), end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 inches */ 1:
          message.inches = reader.int32();
          break;
        case /* string color */ 2:
          message.color = reader.string();
          break;
        case /* string name */ 3:
          message.name = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: Hat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* int32 inches = 1; */
    if (message.inches !== 0)
      writer.tag(1, WireType.Varint).int32(message.inches);
    /* string color = 2; */
    if (message.color !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.color);
    /* string name = 3; */
    if (message.name !== "")
      writer.tag(3, WireType.LengthDelimited).string(message.name);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message twirp.example.haberdasher.Hat
 */
export const Hat = new Hat$Type();
/**
 * @generated ServiceType for protobuf service twirp.example.haberdasher.Haberdasher
 */
export const Haberdasher = new ServiceType("twirp.example.haberdasher.Haberdasher", [
  { name: "MakeHat", options: { "google.api.http": { body: "*", post: "/hat" } }, I: Size, O: Hat }
]);
